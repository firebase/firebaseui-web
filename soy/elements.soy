/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

// UI elements for the FirebaseUI widget.

{namespace firebaseui.auth.soy2.element autoescape="strict"}


/**
 * Renders an email input field.
 */
{template .email}
  {@param? email: string} /** The email address to prefill. */
  {@param? disabled: bool} /** Whether the email input is disabled or not. */
  {@param? changeEmail: bool} /** Whether to use change email label. */
  <div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
    <label class="mdl-textfield__label firebaseui-label" for="email">
      {if $changeEmail}
        {msg desc="Label of a change email address input field."}Enter new email address{/msg}
      {else}
        {msg desc="Label of an email address input field."}Email{/msg}
      {/if}
    </label>
    <input
        type="email"
        name="email"
        autocomplete="username"
        class="mdl-textfield__input firebaseui-input firebaseui-id-email"
        value="{$email ?: ''}"
        {if $disabled}disabled{/if}>
  </div>
  <div class="firebaseui-error-wrapper">
    <p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden{sp}
              firebaseui-id-email-error"></p>
  </div>
{/template}


/**
 * Renders a phone number input field.
 */
{template .phoneNumber}
  {@param? nationalNumber: string} /** The phone number to prefill. */

  <div class="firebaseui-phone-number">
    <button class="firebaseui-id-country-selector firebaseui-country-selector{sp}
                   mdl-button mdl-js-button">
      <span class="firebaseui-flag firebaseui-country-selector-flag{sp}
                   firebaseui-id-country-selector-flag"></span>
      <span class="firebaseui-id-country-selector-code">
      </span>
    </button>
    <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label{sp}
                firebaseui-textfield firebaseui-phone-input-wrapper">
      <label class="mdl-textfield__label firebaseui-label" for="phoneNumber">
        {msg desc="Label of an phone number input field."}Phone number{/msg}
      </label>
      <input type="tel" name="phoneNumber"
          class="mdl-textfield__input firebaseui-input firebaseui-id-phone-number"
          value="{$nationalNumber ?: ''}">
    </div>
  </div>
  <div class="firebaseui-error-wrapper">
    <p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden{sp}
              firebaseui-phone-number-error firebaseui-id-phone-number-error"></p>
  </div>
{/template}


/**
 * Renders a phone confirmation code input field.
 */
{template .phoneConfirmationCode}
  <div class="firebaseui-textfield mdl-textfield mdl-js-textfield{sp}
      mdl-textfield--floating-label">
    <label class="mdl-textfield__label firebaseui-label" for="phoneConfirmationCode">
      {msg desc="Label of 6-digit SMS verification code."}6-digit code{/msg}
    </label>
    <input type="number" name="phoneConfirmationCode"
        class="mdl-textfield__input firebaseui-input firebaseui-id-phone-confirmation-code">
  </div>
  <div class="firebaseui-error-wrapper">
    <p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden{sp}
              firebaseui-id-phone-confirmation-code-error"></p>
  </div>
{/template}


/**
 * Renders resend elements.
 */
{template .resend}
  <div class="firebaseui-resend-container">
    <span class="firebaseui-id-resend-countdown">
    </span>
    <a href="javascript:void(0)" class="firebaseui-id-resend-link firebaseui-hidden{sp}
                                        firebaseui-link">
      {msg desc="A link to trigger re-sending the phone confirmation code."}Resend{/msg}
    </a>
  </div>
{/template}


/**
 * Renders an identity provider button.
 */
{template .idpButton}
  {@param providerId: string} /** The IdP provider ID. */
  <button
      class="firebaseui-idp-button mdl-button mdl-js-button mdl-button--raised{sp}
             {call .idpClass_ data="all" /} firebaseui-id-idp-button"
      data-provider-id="{$providerId}">
    <span class="firebaseui-idp-icon-wrapper">
      <img
          class="firebaseui-idp-icon"
          alt=""
          src="{call .idpLogo_ data="all" /}">
    </span>
    {if $providerId == 'password'}
      <span class="firebaseui-idp-text firebaseui-idp-text-long">
        {msg desc="Label for a button to sign in with an email account that requires a password.
            The long version"}
          Sign in with email
        {/msg}
      </span>
      <span class="firebaseui-idp-text firebaseui-idp-text-short">
        {msg desc="Label for a button to sign in with an email account that requires a password.
            The short version"}
          Email
        {/msg}
      </span>
    {elseif $providerId == 'phone'}
      <span class="firebaseui-idp-text firebaseui-idp-text-long">
        {msg desc="Label for a button to sign in with phone number.
            The long version"}
          Sign in with phone
        {/msg}
      </span>
      <span class="firebaseui-idp-text firebaseui-idp-text-short">
        {msg desc="Label for a button to sign in with phone number.
            The short version"}
          Phone
        {/msg}
      </span>
    {else}
      <span class="firebaseui-idp-text firebaseui-idp-text-long">
        {msg desc="Labels for sign-in buttons, long version"}
          Sign in with{sp}
          {call .idpName data="all" /}
        {/msg}
      </span>
      <span class="firebaseui-idp-text firebaseui-idp-text-short">
          {call .idpName data="all" /}
      </span>
    {/if}
  </button>
{/template}


/**
 * Renders a submit button.
 */
{template .submitButton}
  {@param? label: string} /** Label of the button, defaulting to "Next" if not specified. */
  <button type="submit" class="firebaseui-id-submit firebaseui-button{sp}
      mdl-button mdl-js-button mdl-button--raised mdl-button--colored">
    {if $label}
      {$label}
    {else}
      {msg desc="Label of the button that takes the user to the next step in the sign-in flow."}
        Next
      {/msg}
    {/if}
  </button>
{/template}


/**
 * Renders a sign-in button.
 */
{template .signInButton}
  {call .submitButton}
    {param label kind="text"}
      {msg desc="The submit button in the sign-in form."}
        Sign In
      {/msg}
    {/param}
  {/call}
{/template}


/**
 * Renders a save button.
 */
{template .saveButton}
  {call .submitButton}
    {param label kind="text"}
      {msg desc="The submit button for a form that changes the state of the user
          (e.g. creating an account, resetting the password, etc.)."}
        Save
      {/msg}
    {/param}
  {/call}
{/template}


/**
 * Renders a continue button.
 */
{template .continueButton}
  {call .submitButton}
    {param label kind="text"}
      {msg desc="The continue button for a form that redirects the application to another page."}
        Continue
      {/msg}
    {/param}
  {/call}
{/template}


/**
 * Renders two text input fields for setting first and last name.
 */
{template .name}
  {@param? name: string} /** The display name to prefill. */
  <div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
    <label class="mdl-textfield__label firebaseui-label" for="name">
      {msg desc="Label of a field for setting the user's name."}First &amp; last name{/msg}
    </label>
    <input
        type="text"
        name="name"
        autocomplete="name"
        class="mdl-textfield__input firebaseui-input firebaseui-id-name"
        value="{$name ?: ''}">
  </div>
  <div class="firebaseui-error-wrapper">
    <p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden{sp}
              firebaseui-id-name-error"></p>
  </div>
{/template}


/**
 * Renders a new password input field, where the user can show the password by clicking the toggle
 * button.
 */
{template .newPassword}
  {@param? label: string} /** The placeholder text in the field, defaulting to "Choose password". */
  <div class="firebaseui-new-password-component">
    <div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
      <label class="mdl-textfield__label firebaseui-label" for="newPassword">
        {if $label}
          {$label}
        {else}
          {msg desc="Label of a field for setting new password."}Choose password{/msg}
        {/if}
      </label>
      <input
          type="password"
          name="newPassword"
          autocomplete="new-password"
          class="mdl-textfield__input firebaseui-input firebaseui-id-new-password">
    </div>
    <a href="javascript:void(0)" class="firebaseui-input-floating-button{sp}
        firebaseui-id-password-toggle firebaseui-input-toggle-on firebaseui-input-toggle-blur">
    </a>
    <div class="firebaseui-error-wrapper">
      <p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden{sp}
          firebaseui-id-new-password-error">
      </p>
    </div>
  </div>
{/template}


/**
 * Renders a password input field.
 */
{template .password}
  {@param? current: bool} /** Whether to show "Current password" or "Password" label. */
  <div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
    <label class="mdl-textfield__label firebaseui-label" for="password">
      {if $current}
        {msg desc="Label of a password field."}Current password{/msg}
      {else}
        {msg desc="Label of a password field."}Password{/msg}
      {/if}
    </label>
    <input
        type="password"
        name="password"
        autocomplete="current-password"
        class="mdl-textfield__input firebaseui-input firebaseui-id-password">
  </div>
  <div class="firebaseui-error-wrapper">
    <p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden{sp}
              firebaseui-id-password-error">
    </p>
  </div>
{/template}


/**
 * Renders the password recovery button.
 */
{template .passwordRecoveryButton}
  <a class="firebaseui-link firebaseui-id-secondary-link" href="javascript:void(0)">
    {msg desc="Label of the password recovery link"}Trouble signing in?{/msg}
  </a>
{/template}


/**
 * Renders the cancel button.
 */
{template .cancelButton}
  <button class="firebaseui-id-secondary-link firebaseui-button mdl-button mdl-js-button{sp}
                 mdl-button--primary">
    {msg desc="Link to cancel the current flow."}Cancel{/msg}
  </button>
{/template}


/**
 * Renders a notice to the user about SMS rates.
 */
{template .phoneAuthSmsNotice}
  <p class="firebaseui-tos">
    {msg desc="Notify the user that an SMS may be sent, which may cost the user money.
        Note that 'Verify' must match the the label of the 'Verify' button that initiates the
        phone number verification."}
      By tapping Verify, an SMS may be sent. Message &amp; data rates may apply.
    {/msg}
  </p>
{/template}


/**
 * Renders a Terms of Service agreement for password sign-up.
 */
{template .tos}
  {@param? tosUrl: string} /** The Terms of Service URL. */
  <p class="firebaseui-tos">
    {msg desc="Label for the terms of service in a sign-up form"}
      By tapping SAVE, you are indicating that you agree to the{sp}
      <a href="{$tosUrl}" class="firebaseui-link" target="_blank">Terms of Service</a>
    {/msg}
  </p>
{/template}


/**
 * Renders a Terms of Service agreement for phone authentication.
 */
{template .phoneTos}
  {@param? tosUrl: string} /** The Terms of Service URL. */
  <p class="firebaseui-tos">
    {msg desc="The terms of service for a phone authentication flow. Note that
        'Continue' must match the the label of the 'Continue' button that completes the
        phone number verification flow."}
      By tapping Continue you are indicating that you agree to the{sp}
      <a href="{$tosUrl}" class="firebaseui-link" target="_blank">Terms of Service</a>
    {/msg}
  </p>
{/template}


/**
 * Renders an info bar with the given message.
 */
{template .infoBar}
  {@param message: string} /** The message to show. */
  <div class="firebaseui-info-bar firebaseui-id-info-bar">
    <p class="firebaseui-info-bar-message">
      {$message}&nbsp;&nbsp;
      <a href="javascript:void(0)"
         class="firebaseui-link firebaseui-id-dismiss-info-bar">
        {msg desc="label of a button which dismisses the notification message"}
          Dismiss
        {/msg}
      </a>
    </p>
  </div>
{/template}


/**
 * Renders a modal dialog.
 */
{template .dialog}
  {@param content: html}
  {@param? classes: string} /** Additional classes to apply to the dialog. */

  <dialog class="mdl-dialog firebaseui-dialog firebaseui-id-dialog
                 {if $classes}{sp}{$classes}{/if}">
    {$content}
  </dialog>
{/template}


/**
 * Renders a progress dialog with the given icon and message.
 */
{template .progressDialog}
  {@param iconClass: string}
  {@param message: string}

  {call .dialog}
    {param content kind="html"}
      <div class="firebaseui-dialog-icon-wrapper">
        <div class="{$iconClass} firebaseui-dialog-icon"></div>
      </div>
      <div class="firebaseui-progress-dialog-message">
        {$message}
      </div>
    {/param}
  {/call}
{/template}


/**
 * Renders a ListBox dialog.
 */
{template .listBoxDialog}
  {@param items: list<[id:string, iconClass:string, label:string]>}

  {call .dialog}
    {param classes kind="text"}firebaseui-list-box-dialog{/param}
    {param content kind="html"}
      <div class="firebaseui-list-box-actions">
        {foreach $item in $items}
          <button type="button" data-listboxid="{$item.id}"
                  class="mdl-button firebaseui-id-list-box-dialog-button{sp}
                         firebaseui-list-box-dialog-button">
            {if $item.iconClass}
              <div class="firebaseui-list-box-icon-wrapper">
                <div class="firebaseui-list-box-icon {$item.iconClass}"></div>
              </div>
            {/if}
            <div class="firebaseui-list-box-label-wrapper">
              {$item.label}
            </div>
          </button>
        {/foreach}
      </div>
    {/param}
  {/call}
{/template}


/**
 * Renders a busy indicator to display while server operations are ongoing.
 */
{template .busyIndicator}
  <div class="mdl-progress mdl-js-progress mdl-progress__indeterminate{sp}
      firebaseui-busy-indicator firebaseui-id-busy-indicator"></div>
{/template}


/**
 * Renders a visible reCAPTCHA container.
 */
{template .recaptcha}
  <div class="firebaseui-recaptcha-wrapper">
    <div class="firebaseui-recaptcha-container"></div>
    <div class="firebaseui-error-wrapper firebaseui-recaptcha-error-wrapper">
      <p class="firebaseui-error firebaseui-hidden firebaseui-id-recaptcha-error"></p>
    </div>
  </div>
{/template}


/**
 * Determines the IdP display name.
 * The list should match the supported provider IDs in Firebase Auth.
 */
{template .idpName kind="text"}
  {@param? providerId: string} /** The provider ID of the IdP. */
  {switch $providerId}
    {case 'google.com'}
      {msg desc="Display name of the identity provider for Google sign-in."}Google{/msg}
    {case 'github.com'}
      {msg desc="Display name of the identity provider for Github sign-in."}Github{/msg}
    {case 'facebook.com'}
      {msg desc="Display name of the identity provider for Facebook sign-in."}Facebook{/msg}
    {case 'twitter.com'}
      {msg desc="Display name of the identity provider for Twitter sign-in."}Twitter{/msg}
    {default}
      {msg desc="Display name of the identity provider for password sign-in."}Password{/msg}
  {/switch}
{/template}


/**
 * Determines the IdP CSS class.
 * The list should match the supported provider IDs in Firebase Auth.
 */
{template .idpClass_ kind="text"}
  {@param? providerId: string} /** The provider ID of the IdP. */
  {switch $providerId}
    {case 'google.com'}
      firebaseui-idp-google
    {case 'github.com'}
      firebaseui-idp-github
    {case 'facebook.com'}
      firebaseui-idp-facebook
    {case 'twitter.com'}
      firebaseui-idp-twitter
    {case 'phone'}
      firebaseui-idp-phone
    {default}
      firebaseui-idp-password
  {/switch}
{/template}


/**
 * Determines the IdP logo URL.
 * The list should match the supported provider IDs in Firebase Auth.
 */
{template .idpLogo_ kind="uri"}
  {@param? providerId: string} /** The provider ID of the IdP. */
  {switch $providerId}
    {case 'google.com'}
      {$ij.googleLogo}
    {case 'github.com'}
      {$ij.githubLogo}
    {case 'facebook.com'}
      {$ij.facebookLogo}
    {case 'twitter.com'}
      {$ij.twitterLogo}
    {case 'phone'}
      {$ij.phoneLogo}
    {default}
      {$ij.passwordLogo}
  {/switch}
{/template}
